[project]
name = "rag-webapp-backend"
version = "1.0.0"
description = "Local RAG-based Document Q&A WebApp Backend"
authors = [
    {name = "RAG WebApp Team"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"

dependencies = [
    # FastAPI and server
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "websockets>=12.0",
    
    # Data models and validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # HTTP client
    "httpx>=0.25.0",
    "aiohttp>=3.8.0",
    
    # JSON handling
    "orjson>=3.9.0",
    
    # Vector database
    "qdrant-client>=1.7.0",
    
    # Embeddings and ML
    "sentence-transformers>=2.2.0",
    "torch>=2.1.0",
    "numpy>=1.24.0",
    "transformers>=4.36.0",
    "tokenizers>=0.15.0",
    
    # Document processing
    "PyPDF2>=3.0.0",
    "python-docx>=1.1.0",
    "python-pptx>=1.0.0",
    "ebooklib>=0.18",
    "python-magic>=0.4.27",
    "chardet>=5.2.0",
    "docling>=2.0.0,<2.10.0",  # Pin to earlier version to avoid dependency conflicts
    
    # System monitoring
    "psutil>=5.9.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",  # for testing
    
    # Linting and formatting
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

[project.scripts]
rag-server = "app.main:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["app*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "sentence_transformers.*",
    "transformers.*",
    "pypdf2.*",
    "docx.*",
    "magic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
